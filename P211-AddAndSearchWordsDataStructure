# optimal solution
class WordDictionary:
    def __init__(self):
        self.root = {}

    def addWord(self, word: str) -> None:
        node = self.root
        for c in word + "$":
            node = node.setdefault(c, {})

    def search(self, word: str) -> bool:
        def find(word, idx, node):
            if word[idx] == "$":
                return "$" in node
            elif word[idx] != ".":
                return word[idx] in node and find(word, idx+1, node[word[idx]])
            else:
                return any([find(word, idx+1, child) for child in node.values()])
        
        return find(word+"$", 0, self.root)

# simple but slices text
class WordDictionary:
    def __init__(self):
        self.root = {}

    def addWord(self, word: str) -> None:
        node = self.root
        for c in word + "$":
            node = node.setdefault(c, {})

    def search(self, word: str) -> bool:
        def searchNode(node, subWord) -> bool:
            for i, c in enumerate(subWord):
                if c == "$" and c in node:
                    return True
                if c in node:
                    node = node[c]
                elif c == ".":
                    return any([searchNode(n, subWord[i+1:]) for n in node.values()])
                else:
                    return False

        return searchNode(self.root, word + "$")


class WordDictionary:

    def __init__(self):
        self.root = {}

    def addWord(self, word: str) -> None:
        node = self.root
        for c in word + "$":
            node = node.setdefault(c, {})

    def search(self, word: str) -> bool:
        def searchFrom(word, node):
            if len(word) == 1 and word[0] == "$" and "$" in node:
                return True
            if word[0] not in node and word[0] != ".":
                return False

            boolCharIsWildCard = (word[0] == ".") and any([searchFrom(word[1:], node[key]) for key in node])
            boolCharInNode = (word[0] in node) and searchFrom(word[1:], node[word[0]])
            return boolCharIsWildCard or boolCharInNode
        
        return searchFrom(word+"$", self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)