# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

#cleaner solution
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        if (not p and q) or (p and not q):
            return False

        return (p.val == q.val) and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right) 

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        pNodes = []
        qNodes = []

        def dfs(nodesList, node, path):
            nodesList.append(path)
            if node:
                nodesList.append(str(node.val))
                dfs(nodesList, node.left, "L")
                dfs(nodesList, node.right, "R")
            else:
                nodesList.append("N")
        
        dfs(pNodes, p, "O")
        dfs(qNodes, q, "O")

        return pNodes == qNodes
