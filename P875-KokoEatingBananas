class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:

        maxSpeed = max(piles)
        def feasible (piles, speed, h):
            timePerPile = [ (x - 1) // speed + 1 for x in piles]
            return sum(timePerPile) <= h

        # BSearch
        L, R = 1, maxSpeed
        while L < R:
            M = L + (R - L) // 2
            if feasible(piles, M, h):
                R = M
            else:
                L = M + 1
        return L
