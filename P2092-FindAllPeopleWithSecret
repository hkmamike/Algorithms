class UnionFind:

	def __init__(self, n: int):
		self.parent = list(range(n))
		self.rank = [1] * n

	def find(self, p: int) -> int:
		"""Find with path compression"""
		if p != self.parent[p]:
			self.parent[p] = self.find(self.parent[p])
		return self.parent[p]

	def union(self, p: int, q: int) -> bool:
		"""Union with rank"""
		prt, qrt = self.find(p), self.find(q)
		if prt == qrt: return False
		if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt 
		self.parent[prt] = qrt
		self.rank[qrt] += self.rank[prt]
		return True


class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        uf = UnionFind(n)
        uf.union(0, firstPerson)
        for _, grp in groupby(sorted(meetings, key=lambda x: x[2]), key=lambda x: x[2]): 
            seen = set()
            for x, y, _ in grp: 
                seen.add(x)
                seen.add(y)
                uf.union(x, y)
            for x in seen: 
                if uf.find(x) != uf.find(0): uf.parent[x] = x # reset 
        return [x for x in range(n) if uf.find(x) == uf.find(0)]
    


class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        hasSecret = {0, firstPerson}

        for _, group in groupby(sorted(meetings, key=lambda x: x[2]), key=lambda x: x[2]):
            qSet = set()
            graph = defaultdict(list)

            for x, y, _ in group:
                graph[x].append(y)
                graph[y].append(x)
                if x in hasSecret:
                    qSet.add(x)
                if y in hasSecret:
                    qSet.add(y)
            
            q = deque(qSet)
            while q:
                item = q.popleft()
                for entry in graph[item]:
                    if entry not in hasSecret:
                        hasSecret.add(entry)
                        q.append(entry)

        return list(hasSecret)
        
