#Cleaner Solution
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        origin = ListNode(None)
        node = origin
        
        while l1 or l2:
            if not l1:
                node.next = l2
                l2 = l2.next
                node = node.next
            elif not l2:
                node.next = l1
                l1 = l1.next
                node = node.next
            elif l1.val < l2.val:
                node.next = l1
                l1 = l1.next
                node = node.next
            else:
                node.next = l2
                l2 = l2.next
                node = node.next
                
        return origin.next

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:

        if not list1 and not list2: return None
        if not list1: return list2
        if not list2: return list1
        
        # prepend dummy node to list1
        head = ListNode(-101, list1)
        prev = head
        cur = head.next

        while cur:
            while list2 and cur.val >= list2.val:
                prev.next = list2
                list2.next, prev, list2 = cur, list2, list2.next

            prev = prev.next
            cur = cur.next

        if list2:
            prev.next = list2

        return head.next
